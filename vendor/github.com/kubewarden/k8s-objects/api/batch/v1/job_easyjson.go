// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v11 "github.com/kubewarden/k8s-objects/api/core/v1"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV1(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(JobSpec)
				}
				easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(JobStatus)
				}
				easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV1(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Job) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Job) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Job) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Job) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV1(l, v)
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV12(in *jlexer.Lexer, out *JobStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active":
			out.Active = int32(in.Int32())
		case "completedIndexes":
			out.CompletedIndexes = string(in.String())
		case "completionTime":
			if in.IsNull() {
				in.Skip()
				out.CompletionTime = nil
			} else {
				if out.CompletionTime == nil {
					out.CompletionTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CompletionTime).UnmarshalJSON(data))
				}
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*JobCondition, 0, 8)
					} else {
						out.Conditions = []*JobCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *JobCondition
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(JobCondition)
						}
						easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV13(in, v1)
					}
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failed":
			out.Failed = int32(in.Int32())
		case "ready":
			out.Ready = int32(in.Int32())
		case "startTime":
			if in.IsNull() {
				in.Skip()
				out.StartTime = nil
			} else {
				if out.StartTime == nil {
					out.StartTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartTime).UnmarshalJSON(data))
				}
			}
		case "succeeded":
			out.Succeeded = int32(in.Int32())
		case "uncountedTerminatedPods":
			if in.IsNull() {
				in.Skip()
				out.UncountedTerminatedPods = nil
			} else {
				if out.UncountedTerminatedPods == nil {
					out.UncountedTerminatedPods = new(UncountedTerminatedPods)
				}
				easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV14(in, out.UncountedTerminatedPods)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV12(out *jwriter.Writer, in JobStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Active != 0 {
		const prefix string = ",\"active\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Active))
	}
	if in.CompletedIndexes != "" {
		const prefix string = ",\"completedIndexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompletedIndexes))
	}
	if in.CompletionTime != nil {
		const prefix string = ",\"completionTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CompletionTime).MarshalJSON())
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Conditions {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV13(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Failed != 0 {
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Failed))
	}
	if in.Ready != 0 {
		const prefix string = ",\"ready\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ready))
	}
	if in.StartTime != nil {
		const prefix string = ",\"startTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.StartTime).MarshalJSON())
	}
	if in.Succeeded != 0 {
		const prefix string = ",\"succeeded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Succeeded))
	}
	if in.UncountedTerminatedPods != nil {
		const prefix string = ",\"uncountedTerminatedPods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV14(out, *in.UncountedTerminatedPods)
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV14(in *jlexer.Lexer, out *UncountedTerminatedPods) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "failed":
			if in.IsNull() {
				in.Skip()
				out.Failed = nil
			} else {
				in.Delim('[')
				if out.Failed == nil {
					if !in.IsDelim(']') {
						out.Failed = make([]string, 0, 4)
					} else {
						out.Failed = []string{}
					}
				} else {
					out.Failed = (out.Failed)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Failed = append(out.Failed, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "succeeded":
			if in.IsNull() {
				in.Skip()
				out.Succeeded = nil
			} else {
				in.Delim('[')
				if out.Succeeded == nil {
					if !in.IsDelim(']') {
						out.Succeeded = make([]string, 0, 4)
					} else {
						out.Succeeded = []string{}
					}
				} else {
					out.Succeeded = (out.Succeeded)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Succeeded = append(out.Succeeded, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV14(out *jwriter.Writer, in UncountedTerminatedPods) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Failed) != 0 {
		const prefix string = ",\"failed\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v6, v7 := range in.Failed {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Succeeded) != 0 {
		const prefix string = ",\"succeeded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Succeeded {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV13(in *jlexer.Lexer, out *JobCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastProbeTime":
			if in.IsNull() {
				in.Skip()
				out.LastProbeTime = nil
			} else {
				if out.LastProbeTime == nil {
					out.LastProbeTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastProbeTime).UnmarshalJSON(data))
				}
			}
		case "lastTransitionTime":
			if in.IsNull() {
				in.Skip()
				out.LastTransitionTime = nil
			} else {
				if out.LastTransitionTime == nil {
					out.LastTransitionTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastTransitionTime).UnmarshalJSON(data))
				}
			}
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV13(out *jwriter.Writer, in JobCondition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LastProbeTime != nil {
		const prefix string = ",\"lastProbeTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.LastProbeTime).MarshalJSON())
	}
	if in.LastTransitionTime != nil {
		const prefix string = ",\"lastTransitionTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LastTransitionTime).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV11(in *jlexer.Lexer, out *JobSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "activeDeadlineSeconds":
			out.ActiveDeadlineSeconds = int64(in.Int64())
		case "backoffLimit":
			out.BackoffLimit = int32(in.Int32())
		case "completionMode":
			out.CompletionMode = string(in.String())
		case "completions":
			out.Completions = int32(in.Int32())
		case "manualSelector":
			out.ManualSelector = bool(in.Bool())
		case "parallelism":
			out.Parallelism = int32(in.Int32())
		case "podFailurePolicy":
			if in.IsNull() {
				in.Skip()
				out.PodFailurePolicy = nil
			} else {
				if out.PodFailurePolicy == nil {
					out.PodFailurePolicy = new(PodFailurePolicy)
				}
				easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV15(in, out.PodFailurePolicy)
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v1.LabelSelector)
				}
				(*out.Selector).UnmarshalEasyJSON(in)
			}
		case "suspend":
			out.Suspend = bool(in.Bool())
		case "template":
			if in.IsNull() {
				in.Skip()
				out.Template = nil
			} else {
				if out.Template == nil {
					out.Template = new(_v11.PodTemplateSpec)
				}
				(*out.Template).UnmarshalEasyJSON(in)
			}
		case "ttlSecondsAfterFinished":
			out.TTLSecondsAfterFinished = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV11(out *jwriter.Writer, in JobSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ActiveDeadlineSeconds != 0 {
		const prefix string = ",\"activeDeadlineSeconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ActiveDeadlineSeconds))
	}
	if in.BackoffLimit != 0 {
		const prefix string = ",\"backoffLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BackoffLimit))
	}
	if in.CompletionMode != "" {
		const prefix string = ",\"completionMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompletionMode))
	}
	if in.Completions != 0 {
		const prefix string = ",\"completions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Completions))
	}
	if in.ManualSelector {
		const prefix string = ",\"manualSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ManualSelector))
	}
	if in.Parallelism != 0 {
		const prefix string = ",\"parallelism\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Parallelism))
	}
	if in.PodFailurePolicy != nil {
		const prefix string = ",\"podFailurePolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV15(out, *in.PodFailurePolicy)
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Selector).MarshalEasyJSON(out)
	}
	if in.Suspend {
		const prefix string = ",\"suspend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Suspend))
	}
	{
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Template == nil {
			out.RawString("null")
		} else {
			(*in.Template).MarshalEasyJSON(out)
		}
	}
	if in.TTLSecondsAfterFinished != 0 {
		const prefix string = ",\"ttlSecondsAfterFinished\":"
		out.RawString(prefix)
		out.Int32(int32(in.TTLSecondsAfterFinished))
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV15(in *jlexer.Lexer, out *PodFailurePolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*PodFailurePolicyRule, 0, 8)
					} else {
						out.Rules = []*PodFailurePolicyRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *PodFailurePolicyRule
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(PodFailurePolicyRule)
						}
						easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV16(in, v10)
					}
					out.Rules = append(out.Rules, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV15(out *jwriter.Writer, in PodFailurePolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rules\":"
		out.RawString(prefix[1:])
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Rules {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV16(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV16(in *jlexer.Lexer, out *PodFailurePolicyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(string)
				}
				*out.Action = string(in.String())
			}
		case "onExitCodes":
			if in.IsNull() {
				in.Skip()
				out.OnExitCodes = nil
			} else {
				if out.OnExitCodes == nil {
					out.OnExitCodes = new(PodFailurePolicyOnExitCodesRequirement)
				}
				easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV17(in, out.OnExitCodes)
			}
		case "onPodConditions":
			if in.IsNull() {
				in.Skip()
				out.OnPodConditions = nil
			} else {
				in.Delim('[')
				if out.OnPodConditions == nil {
					if !in.IsDelim(']') {
						out.OnPodConditions = make([]*PodFailurePolicyOnPodConditionsPattern, 0, 8)
					} else {
						out.OnPodConditions = []*PodFailurePolicyOnPodConditionsPattern{}
					}
				} else {
					out.OnPodConditions = (out.OnPodConditions)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *PodFailurePolicyOnPodConditionsPattern
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(PodFailurePolicyOnPodConditionsPattern)
						}
						easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV18(in, v13)
					}
					out.OnPodConditions = append(out.OnPodConditions, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV16(out *jwriter.Writer, in PodFailurePolicyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		if in.Action == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Action))
		}
	}
	if in.OnExitCodes != nil {
		const prefix string = ",\"onExitCodes\":"
		out.RawString(prefix)
		easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV17(out, *in.OnExitCodes)
	}
	{
		const prefix string = ",\"onPodConditions\":"
		out.RawString(prefix)
		if in.OnPodConditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.OnPodConditions {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV18(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV18(in *jlexer.Lexer, out *PodFailurePolicyOnPodConditionsPattern) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV18(out *jwriter.Writer, in PodFailurePolicyOnPodConditionsPattern) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson8a33d6c7DecodeGithubComKubewardenK8sObjectsApiBatchV17(in *jlexer.Lexer, out *PodFailurePolicyOnExitCodesRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerName":
			out.ContainerName = string(in.String())
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]int32, 0, 16)
					} else {
						out.Values = []int32{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v16 int32
					v16 = int32(in.Int32())
					out.Values = append(out.Values, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8a33d6c7EncodeGithubComKubewardenK8sObjectsApiBatchV17(out *jwriter.Writer, in PodFailurePolicyOnExitCodesRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerName != "" {
		const prefix string = ",\"containerName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerName))
	}
	{
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Operator == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Operator))
		}
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Values {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
