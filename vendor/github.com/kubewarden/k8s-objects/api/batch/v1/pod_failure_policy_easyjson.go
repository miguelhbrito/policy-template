// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV1(in *jlexer.Lexer, out *PodFailurePolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*PodFailurePolicyRule, 0, 8)
					} else {
						out.Rules = []*PodFailurePolicyRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *PodFailurePolicyRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(PodFailurePolicyRule)
						}
						easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV11(in, v1)
					}
					out.Rules = append(out.Rules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV1(out *jwriter.Writer, in PodFailurePolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rules\":"
		out.RawString(prefix[1:])
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Rules {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV11(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodFailurePolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodFailurePolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodFailurePolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodFailurePolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV1(l, v)
}
func easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV11(in *jlexer.Lexer, out *PodFailurePolicyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(string)
				}
				*out.Action = string(in.String())
			}
		case "onExitCodes":
			if in.IsNull() {
				in.Skip()
				out.OnExitCodes = nil
			} else {
				if out.OnExitCodes == nil {
					out.OnExitCodes = new(PodFailurePolicyOnExitCodesRequirement)
				}
				easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV12(in, out.OnExitCodes)
			}
		case "onPodConditions":
			if in.IsNull() {
				in.Skip()
				out.OnPodConditions = nil
			} else {
				in.Delim('[')
				if out.OnPodConditions == nil {
					if !in.IsDelim(']') {
						out.OnPodConditions = make([]*PodFailurePolicyOnPodConditionsPattern, 0, 8)
					} else {
						out.OnPodConditions = []*PodFailurePolicyOnPodConditionsPattern{}
					}
				} else {
					out.OnPodConditions = (out.OnPodConditions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *PodFailurePolicyOnPodConditionsPattern
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(PodFailurePolicyOnPodConditionsPattern)
						}
						easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV13(in, v4)
					}
					out.OnPodConditions = append(out.OnPodConditions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV11(out *jwriter.Writer, in PodFailurePolicyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		if in.Action == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Action))
		}
	}
	if in.OnExitCodes != nil {
		const prefix string = ",\"onExitCodes\":"
		out.RawString(prefix)
		easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV12(out, *in.OnExitCodes)
	}
	{
		const prefix string = ",\"onPodConditions\":"
		out.RawString(prefix)
		if in.OnPodConditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.OnPodConditions {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV13(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV13(in *jlexer.Lexer, out *PodFailurePolicyOnPodConditionsPattern) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV13(out *jwriter.Writer, in PodFailurePolicyOnPodConditionsPattern) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson65a45b57DecodeGithubComKubewardenK8sObjectsApiBatchV12(in *jlexer.Lexer, out *PodFailurePolicyOnExitCodesRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerName":
			out.ContainerName = string(in.String())
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]int32, 0, 16)
					} else {
						out.Values = []int32{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int32
					v7 = int32(in.Int32())
					out.Values = append(out.Values, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a45b57EncodeGithubComKubewardenK8sObjectsApiBatchV12(out *jwriter.Writer, in PodFailurePolicyOnExitCodesRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerName != "" {
		const prefix string = ",\"containerName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerName))
	}
	{
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Operator == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Operator))
		}
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Values {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
