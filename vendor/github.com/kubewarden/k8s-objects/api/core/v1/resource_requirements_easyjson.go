// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson28f1750dDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ResourceRequirements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claims":
			if in.IsNull() {
				in.Skip()
				out.Claims = nil
			} else {
				in.Delim('[')
				if out.Claims == nil {
					if !in.IsDelim(']') {
						out.Claims = make([]*ResourceClaim, 0, 8)
					} else {
						out.Claims = []*ResourceClaim{}
					}
				} else {
					out.Claims = (out.Claims)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ResourceClaim
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ResourceClaim)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Claims = append(out.Claims, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Limits = make(map[string]*resource.Quantity)
				} else {
					out.Limits = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(resource.Quantity)
						}
						*v2 = resource.Quantity(in.String())
					}
					(out.Limits)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Requests = make(map[string]*resource.Quantity)
				} else {
					out.Requests = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(resource.Quantity)
						}
						*v3 = resource.Quantity(in.String())
					}
					(out.Requests)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson28f1750dEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ResourceRequirements) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Claims) != 0 {
		const prefix string = ",\"claims\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.Claims {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Limits) != 0 {
		const prefix string = ",\"limits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Limits {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requests) != 0 {
		const prefix string = ",\"requests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Requests {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceRequirements) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson28f1750dEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceRequirements) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson28f1750dEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceRequirements) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson28f1750dDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceRequirements) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson28f1750dDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
